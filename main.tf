# VelPharma Infrastructure as Code
# This configuration manages the local Docker development environment

terraform {
  required_version = ">= 1.0"
  required_providers {
    local = {
      source  = "hashicorp/local"
      version = "~> 2.0"
    }
  }
}

# For now, we're managing files manually in the repository
# OpenTofu is ready to manage cloud resources when you're ready to deploy

# Example: Create a .env file for local development
resource "local_file" "env_file" {
  filename = "${path.module}/.env"
  content  = <<-EOT
    # VelPharma Environment Configuration
    # Generated by OpenTofu

    # Database Configuration
    POSTGRES_DB=${var.db_name}
    POSTGRES_USER=${var.db_user}
    POSTGRES_PASSWORD=${var.db_password}
    POSTGRES_PORT=${var.db_port}

    # Project Configuration
    PROJECT_NAME=${var.project_name}
    ENVIRONMENT=${var.environment}

    # Database Connection String for Backend
    DATABASE_URL=postgresql://${var.db_user}:${var.db_password}@localhost:${var.db_port}/${var.db_name}
  EOT

  file_permission = "0644"
}

# Create a README for the project
resource "local_file" "readme" {
  filename = "${path.module}/README.md"
  content  = <<-EOT
    # VelPharma Infrastructure

    Local Docker-based development environment managed with OpenTofu.

    ## Quick Start

    ```bash
    # First time setup or get latest data
    git pull
    ./reset-db.sh

    # Database ready in 30-60 seconds with production data!
    ```

    ## Services

    | Service | URL/Connection | Credentials |
    |---------|----------------|-------------|
    | PostgreSQL | `localhost:${var.db_port}` | ${var.db_user} / ${var.db_password} |
    | PgAdmin | http://localhost:5050 | admin@velpharma.com / admin |

    **Connection string:**
    ```
    postgresql://${var.db_user}:${var.db_password}@localhost:${var.db_port}/${var.db_name}
    ```

    ## Documentation

    - **[QUICK_START.md](QUICK_START.md)** - Common commands and daily workflows
    - **[DATABASE_WORKFLOW.md](DATABASE_WORKFLOW.md)** - Complete data management guide
    - **[backups/README.md](backups/README.md)** - Backup strategy and monthly updates

    ## Key Scripts

    | Script | Purpose |
    |--------|---------|
    | `./reset-db.sh` | Reset database (loads from Git backup) |
    | `./create-backup.sh` | Create backup from local Docker |
    | `./backup-from-azure.sh` | Emergency: Export from Azure production |
    | `./monitor-db.sh` | Monitor database performance |

    ## Common Commands

    ```bash
    # Start database (keeps existing data)
    docker compose up -d

    # Stop database
    docker compose down

    # View logs
    docker compose logs -f postgres

    # Connect via psql
    docker compose exec postgres psql -U ${var.db_user} -d ${var.db_name}
    ```

    ## Infrastructure Management

    This project uses OpenTofu to generate configuration files:

    ```bash
    # Initialize OpenTofu
    tofu init

    # Apply changes (regenerates .env and this README)
    tofu apply

    # Modify settings in variables.tf, then apply
    ```

    ## Data Strategy

    - **Production backup** tracked in Git (`backups/production_backup_data_only.sql`)
    - **Monthly updates** run against LOCAL Docker, then committed to Git
    - **Team sync** via `git pull && ./reset-db.sh`
    - **Azure backup** available for emergencies only

    See [DATABASE_WORKFLOW.md](DATABASE_WORKFLOW.md) for complete details.

    ## Troubleshooting

    | Issue | Solution |
    |-------|----------|
    | No data after reset | Check logs: `docker compose logs postgres` |
    | Port conflict | Edit `variables.tf`, change `db_port`, run `tofu apply` |
    | PgAdmin can't connect | Use host `postgres` (not localhost), port `5432` |
    | Database won't start | Run `docker compose down -v && ./reset-db.sh` |

    For detailed troubleshooting, see [DATABASE_WORKFLOW.md](DATABASE_WORKFLOW.md#troubleshooting).
  EOT

  file_permission = "0644"
}

# Output useful information
output "database_url" {
  description = "Database connection string for backend"
  value       = "postgresql://${var.db_user}:${var.db_password}@localhost:${var.db_port}/${var.db_name}"
  sensitive   = true
}

output "next_steps" {
  description = "Next steps to get started"
  sensitive   = true
  value       = <<-EOT

    Your infrastructure is ready! Next steps:

    1. Start the database:
       docker-compose up -d

    2. Check it's running:
       docker-compose ps

    3. View logs:
       docker-compose logs postgres

    4. Connect from your backend using:
       postgresql://${var.db_user}:${var.db_password}@localhost:${var.db_port}/${var.db_name}
  EOT
}
