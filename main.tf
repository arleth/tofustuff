# VelPharma Infrastructure as Code
# This configuration manages the local Docker development environment

terraform {
  required_version = ">= 1.0"
  required_providers {
    local = {
      source  = "hashicorp/local"
      version = "~> 2.0"
    }
  }
}

# For now, we're managing files manually in the repository
# OpenTofu is ready to manage cloud resources when you're ready to deploy

# Example: Create a .env file for local development
resource "local_file" "env_file" {
  filename = "${path.module}/.env"
  content  = <<-EOT
    # VelPharma Environment Configuration
    # Generated by OpenTofu

    # Database Configuration
    POSTGRES_DB=${var.db_name}
    POSTGRES_USER=${var.db_user}
    POSTGRES_PASSWORD=${var.db_password}
    POSTGRES_PORT=${var.db_port}

    # Project Configuration
    PROJECT_NAME=${var.project_name}
    ENVIRONMENT=${var.environment}

    # Database Connection String for Backend
    DATABASE_URL=postgresql://${var.db_user}:${var.db_password}@localhost:${var.db_port}/${var.db_name}
  EOT

  file_permission = "0644"
}

# Create a README for the project
resource "local_file" "readme" {
  filename = "${path.module}/README.md"
  content  = <<-EOT
    # VelPharma Infrastructure

    ## Overview
    This project manages the VelPharma infrastructure using OpenTofu and Docker.

    ## Structure
    ```
    .
    ├── postgres/           # PostgreSQL database
    │   ├── Dockerfile
    │   └── init/          # Database initialization scripts
    │       ├── 01-create-user.sql
    │       ├── 02-create-schema.sql
    │       └── 03-create-extensions.sql
    ├── backups/           # Database backup directory
    ├── reset-db.sh        # Script to rebuild database with fresh schema
    ├── docker-compose.yml # Service orchestration (postgres + pgadmin)
    ├── main.tf            # OpenTofu main configuration
    ├── variables.tf       # Configuration variables
    └── .env               # Environment configuration (generated by OpenTofu)
    ```

    ## Getting Started

    ### Prerequisites
    - Docker Desktop for Mac
    - OpenTofu CLI

    ### Initial Setup
    1. Initialize OpenTofu:
       ```bash
       tofu init
       ```

    2. Apply configuration (generates .env and this README):
       ```bash
       tofu apply
       ```

    3. Start the services:
       ```bash
       docker-compose up -d
       ```

    4. Check services are running:
       ```bash
       docker-compose ps
       docker-compose logs -f
       ```

    ### Development Workflow

    **When you change init scripts and want a clean slate:**
    ```bash
    ./reset-db.sh
    ```

    **For normal development (keeps existing data):**
    ```bash
    docker-compose up -d
    ```

    ### Services

    #### PostgreSQL Database
    - **Host:** localhost
    - **Port:** ${var.db_port} (external) / 5432 (internal Docker network)
    - **Database:** ${var.db_name}
    - **User:** ${var.db_user}
    - **Password:** ${var.db_password}
    - **Schema:** vpv4

    Connection string for external applications:
    ```
    postgresql://${var.db_user}:${var.db_password}@localhost:${var.db_port}/${var.db_name}
    ```

    Connection string for Docker services:
    ```
    postgresql://${var.db_user}:${var.db_password}@postgres:5432/${var.db_name}
    ```

    #### PgAdmin (Database Management UI)
    - **URL:** http://localhost:5050
    - **Email:** admin@velpharma.com
    - **Password:** admin

    **To connect PgAdmin to database:**
    - Host: `postgres`, Port: `5432`, Database: `${var.db_name}`, User: `${var.db_user}`, Password: `${var.db_password}`

    ### Database Schema (vpv4)

    **Core:** ATC_CODES, ACTIVE_SUBSTANCES, PRODUCTS, MANUFACTURERS
    **ADRs:** ADVERSE_DRUG_REACTIONS, SYNONYMS, FREQUENCIES, ORGANS, SPECIALTIES, PARA_CLINICS
    **Deprescribing:** DEPRESCRIBING_GUIDELINES, DEPRESCRIBING_CONDITIONS
    **Staging:** IMPORT_STAGING_PRODUCTS_SUBSTANCES

    ### Data Loading Strategy

    **Automatic (Default)**: Database loads from `backups/production_backup.sql` on init
    **Fallback**: Seed file `_05-seed-base.sql` if no backup exists
    **Manual**: See `DATABASE_WORKFLOW.md` for complete data management guide

    ### Useful Commands
    ```bash
    # Start/stop services
    docker-compose up -d
    docker-compose down
    docker-compose down -v              # Remove volumes (deletes data!)

    # Logs
    docker-compose logs -f
    docker-compose logs -f postgres

    # Database access
    docker-compose exec postgres psql -U ${var.db_user} -d ${var.db_name}

    # Backup/restore
    docker-compose exec postgres pg_dump -U ${var.db_user} ${var.db_name} > backups/backup.sql
    docker-compose exec -T postgres psql -U ${var.db_user} ${var.db_name} < backups/backup.sql

    # Reset database (deletes all data!)
    ./reset-db.sh
    ```

    ### Troubleshooting
    - **No data after reset?** Ensure `backups/production_backup.sql` exists
    - **Init scripts not running?** Use `./reset-db.sh` to force re-initialization
    - **Port conflict?** Check with `lsof -i :${var.db_port}`
    - **PgAdmin can't connect?** Use host `postgres` (not `localhost`) and port `5432` (not `${var.db_port}`)

    ### Important Files
    - `DATABASE_WORKFLOW.md` - Complete data management guide
    - `./reset-db.sh` - Reset database (loads backup)
    - `./create-backup.sh` - Create new backup
    - `./monitor-db.sh` - Monitor performance

    ## Configuration
    Edit `variables.tf` and run `tofu apply` to regenerate `.env` and this README.

    ## Future Plans
    - [ ] Add backend service container
    - [ ] Add frontend service container
    - [ ] Automated database migrations
    - [ ] Kubernetes deployment
    - [ ] CI/CD pipeline
  EOT

  file_permission = "0644"
}

# Output useful information
output "database_url" {
  description = "Database connection string for backend"
  value       = "postgresql://${var.db_user}:${var.db_password}@localhost:${var.db_port}/${var.db_name}"
  sensitive   = true
}

output "next_steps" {
  description = "Next steps to get started"
  sensitive   = true
  value       = <<-EOT

    Your infrastructure is ready! Next steps:

    1. Start the database:
       docker-compose up -d

    2. Check it's running:
       docker-compose ps

    3. View logs:
       docker-compose logs postgres

    4. Connect from your backend using:
       postgresql://${var.db_user}:${var.db_password}@localhost:${var.db_port}/${var.db_name}
  EOT
}
